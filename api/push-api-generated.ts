/* tslint:disable */
/* eslint-disable */
/*
Platform API

The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.

The version of the OpenAPI document: 1.1.0
Contact: support@ably.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeviceDetails } from '../models';
// @ts-ignore
import { PublishPushNotificationToDevicesRequest } from '../models';
// @ts-ignore
import { Push } from '../models';
// @ts-ignore
import { Recipient } from '../models';
// @ts-ignore
import { SubscribePushDeviceToChannelRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PushApi - axios parameter creator
 * @export
 */
export const PushApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a device details object.
         * @summary Delete a registered device\'s update token
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {string} [channel] Filter to restrict to subscriptions associated with that channel.
         * @param {string} [deviceId] Must be set when clientId is empty, cannot be used with clientId.
         * @param {string} [clientId] Must be set when deviceId is empty, cannot be used with deviceId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePushDeviceDetails: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', channel?: string, deviceId?: string, clientId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/push/channelSubscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/channelSubscriptions',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated response of channel names.
         * @summary List all channels with at least one subscribed device
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelsWithPushSubscribers: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/push/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/channels',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the full details of a device.
         * @summary Get a device registration
         * @param {string} deviceId Device\&#39;s ID.
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPushDeviceDetails: async (deviceId: string, xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getPushDeviceDetails', 'deviceId', deviceId)
            const localVarPath = `/push/deviceRegistrations/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/deviceRegistrations/{device_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of push notification subscriptions to channels.
         * @summary List channel subscriptions
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {string} [channel] Filter to restrict to subscriptions associated with that channel.
         * @param {string} [deviceId] Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId.
         * @param {string} [clientId] Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId.
         * @param {number} [limit] The maximum number of records to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPushSubscriptionsOnChannels: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', channel?: string, deviceId?: string, clientId?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/push/channelSubscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/channelSubscriptions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of device details of devices registed for push notifications.
         * @summary List devices registered for receiving push notifications
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {string} [deviceId] Optional filter to restrict to devices associated with that deviceId.
         * @param {string} [clientId] Optional filter to restrict to devices associated with that clientId.
         * @param {number} [limit] The maximum number of records to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegisteredPushDevices: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', deviceId?: string, clientId?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/push/deviceRegistrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/deviceRegistrations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
         * @summary Update a device registration
         * @param {string} deviceId Device\&#39;s ID.
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {DeviceDetails} [deviceDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPushDeviceDetails: async (deviceId: string, xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', deviceDetails?: DeviceDetails, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('patchPushDeviceDetails', 'deviceId', deviceId)
            const localVarPath = `/push/deviceRegistrations/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceDetails,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/deviceRegistrations/{device_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceDetails, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
         * @summary Publish a push notification to device(s)
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {PublishPushNotificationToDevicesRequest} [publishPushNotificationToDevicesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPushNotificationToDevices: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', publishPushNotificationToDevicesRequest?: PublishPushNotificationToDevicesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/push/publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: publishPushNotificationToDevicesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/publish',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(publishPushNotificationToDevicesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
         * @summary Update a device registration
         * @param {string} deviceId Device\&#39;s ID.
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {DeviceDetails} [deviceDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPushDeviceDetails: async (deviceId: string, xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', deviceDetails?: DeviceDetails, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('putPushDeviceDetails', 'deviceId', deviceId)
            const localVarPath = `/push/deviceRegistrations/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceDetails,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/deviceRegistrations/{device_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceDetails, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a device’s details, including the information necessary to deliver push notifications to it. Requires \"push-admin\" capability.
         * @summary Register a device for receiving push notifications
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {DeviceDetails} [deviceDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPushDevice: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', deviceDetails?: DeviceDetails, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/push/deviceRegistrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceDetails,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/deviceRegistrations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceDetails, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
         * @summary Subscribe a device to a channel
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {SubscribePushDeviceToChannelRequest} [subscribePushDeviceToChannelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribePushDeviceToChannel: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', subscribePushDeviceToChannelRequest?: SubscribePushDeviceToChannelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/push/channelSubscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscribePushDeviceToChannelRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/channelSubscriptions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscribePushDeviceToChannelRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
         * @summary Unregister matching devices for push notifications
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {string} [deviceId] Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId.
         * @param {string} [clientId] Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterAllPushDevices: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', deviceId?: string, clientId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/push/deviceRegistrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/deviceRegistrations',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
         * @summary Unregister a single device for push notifications
         * @param {string} deviceId Device\&#39;s ID.
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterPushDevice: async (deviceId: string, xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('unregisterPushDevice', 'deviceId', deviceId)
            const localVarPath = `/push/deviceRegistrations/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/deviceRegistrations/{device_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an updated device details object.
         * @summary Reset a registered device\'s update token
         * @param {string} deviceId Device\&#39;s ID.
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePushDeviceDetails: async (deviceId: string, xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('updatePushDeviceDetails', 'deviceId', deviceId)
            const localVarPath = `/push/deviceRegistrations/{device_id}/resetUpdateToken`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/push/deviceRegistrations/{device_id}/resetUpdateToken',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PushApi - functional programming interface
 * @export
 */
export const PushApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PushApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a device details object.
         * @summary Delete a registered device\'s update token
         * @param {PushApiDeletePushDeviceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePushDeviceDetails(requestParameters: PushApiDeletePushDeviceDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePushDeviceDetails(requestParameters.xAblyVersion, requestParameters.format, requestParameters.channel, requestParameters.deviceId, requestParameters.clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a paginated response of channel names.
         * @summary List all channels with at least one subscribed device
         * @param {PushApiGetChannelsWithPushSubscribersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelsWithPushSubscribers(requestParameters: PushApiGetChannelsWithPushSubscribersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelsWithPushSubscribers(requestParameters.xAblyVersion, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the full details of a device.
         * @summary Get a device registration
         * @param {PushApiGetPushDeviceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPushDeviceDetails(requestParameters: PushApiGetPushDeviceDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPushDeviceDetails(requestParameters.deviceId, requestParameters.xAblyVersion, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of push notification subscriptions to channels.
         * @summary List channel subscriptions
         * @param {PushApiGetPushSubscriptionsOnChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPushSubscriptionsOnChannels(requestParameters: PushApiGetPushSubscriptionsOnChannelsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPushSubscriptionsOnChannels(requestParameters.xAblyVersion, requestParameters.format, requestParameters.channel, requestParameters.deviceId, requestParameters.clientId, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of device details of devices registed for push notifications.
         * @summary List devices registered for receiving push notifications
         * @param {PushApiGetRegisteredPushDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegisteredPushDevices(requestParameters: PushApiGetRegisteredPushDevicesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegisteredPushDevices(requestParameters.xAblyVersion, requestParameters.format, requestParameters.deviceId, requestParameters.clientId, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
         * @summary Update a device registration
         * @param {PushApiPatchPushDeviceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPushDeviceDetails(requestParameters: PushApiPatchPushDeviceDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDetails>> {
            const deviceDetails: DeviceDetails = {
                clientId: requestParameters.clientId,
                deviceSecret: requestParameters.deviceSecret,
                formFactor: requestParameters.formFactor,
                id: requestParameters.id,
                metadata: requestParameters.metadata,
                platform: requestParameters.platform,
                push.recipient: requestParameters.push.recipient,
                push.state: requestParameters.push.state
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPushDeviceDetails(requestParameters.deviceId, requestParameters.xAblyVersion, requestParameters.format, deviceDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
         * @summary Publish a push notification to device(s)
         * @param {PushApiPublishPushNotificationToDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishPushNotificationToDevices(requestParameters: PushApiPublishPushNotificationToDevicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const publishPushNotificationToDevicesRequest: PublishPushNotificationToDevicesRequest = {
                push: requestParameters.push,
                recipient: requestParameters.recipient
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishPushNotificationToDevices(requestParameters.xAblyVersion, requestParameters.format, publishPushNotificationToDevicesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
         * @summary Update a device registration
         * @param {PushApiPutPushDeviceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPushDeviceDetails(requestParameters: PushApiPutPushDeviceDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDetails>> {
            const deviceDetails: DeviceDetails = {
                clientId: requestParameters.clientId,
                deviceSecret: requestParameters.deviceSecret,
                formFactor: requestParameters.formFactor,
                id: requestParameters.id,
                metadata: requestParameters.metadata,
                platform: requestParameters.platform,
                push.recipient: requestParameters.push.recipient,
                push.state: requestParameters.push.state
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPushDeviceDetails(requestParameters.deviceId, requestParameters.xAblyVersion, requestParameters.format, deviceDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register a device’s details, including the information necessary to deliver push notifications to it. Requires \"push-admin\" capability.
         * @summary Register a device for receiving push notifications
         * @param {PushApiRegisterPushDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPushDevice(requestParameters: PushApiRegisterPushDeviceRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDetails>> {
            const deviceDetails: DeviceDetails = {
                clientId: requestParameters.clientId,
                deviceSecret: requestParameters.deviceSecret,
                formFactor: requestParameters.formFactor,
                id: requestParameters.id,
                metadata: requestParameters.metadata,
                platform: requestParameters.platform,
                push.recipient: requestParameters.push.recipient,
                push.state: requestParameters.push.state
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPushDevice(requestParameters.xAblyVersion, requestParameters.format, deviceDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
         * @summary Subscribe a device to a channel
         * @param {PushApiSubscribePushDeviceToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribePushDeviceToChannel(requestParameters: PushApiSubscribePushDeviceToChannelRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const subscribePushDeviceToChannelRequest: SubscribePushDeviceToChannelRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribePushDeviceToChannel(requestParameters.xAblyVersion, requestParameters.format, subscribePushDeviceToChannelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
         * @summary Unregister matching devices for push notifications
         * @param {PushApiUnregisterAllPushDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unregisterAllPushDevices(requestParameters: PushApiUnregisterAllPushDevicesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unregisterAllPushDevices(requestParameters.xAblyVersion, requestParameters.format, requestParameters.deviceId, requestParameters.clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
         * @summary Unregister a single device for push notifications
         * @param {PushApiUnregisterPushDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unregisterPushDevice(requestParameters: PushApiUnregisterPushDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unregisterPushDevice(requestParameters.deviceId, requestParameters.xAblyVersion, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an updated device details object.
         * @summary Reset a registered device\'s update token
         * @param {PushApiUpdatePushDeviceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePushDeviceDetails(requestParameters: PushApiUpdatePushDeviceDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePushDeviceDetails(requestParameters.deviceId, requestParameters.xAblyVersion, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PushApi - factory interface
 * @export
 */
export const PushApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PushApiFp(configuration)
    return {
        /**
         * Delete a device details object.
         * @summary Delete a registered device\'s update token
         * @param {PushApiDeletePushDeviceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePushDeviceDetails(requestParameters: PushApiDeletePushDeviceDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePushDeviceDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated response of channel names.
         * @summary List all channels with at least one subscribed device
         * @param {PushApiGetChannelsWithPushSubscribersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelsWithPushSubscribers(requestParameters: PushApiGetChannelsWithPushSubscribersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getChannelsWithPushSubscribers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the full details of a device.
         * @summary Get a device registration
         * @param {PushApiGetPushDeviceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPushDeviceDetails(requestParameters: PushApiGetPushDeviceDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceDetails> {
            return localVarFp.getPushDeviceDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of push notification subscriptions to channels.
         * @summary List channel subscriptions
         * @param {PushApiGetPushSubscriptionsOnChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPushSubscriptionsOnChannels(requestParameters: PushApiGetPushSubscriptionsOnChannelsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DeviceDetails> {
            return localVarFp.getPushSubscriptionsOnChannels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List of device details of devices registed for push notifications.
         * @summary List devices registered for receiving push notifications
         * @param {PushApiGetRegisteredPushDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegisteredPushDevices(requestParameters: PushApiGetRegisteredPushDevicesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DeviceDetails> {
            return localVarFp.getRegisteredPushDevices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
         * @summary Update a device registration
         * @param {PushApiPatchPushDeviceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPushDeviceDetails(requestParameters: PushApiPatchPushDeviceDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceDetails> {
            return localVarFp.patchPushDeviceDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
         * @summary Publish a push notification to device(s)
         * @param {PushApiPublishPushNotificationToDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPushNotificationToDevices(requestParameters: PushApiPublishPushNotificationToDevicesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publishPushNotificationToDevices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
         * @summary Update a device registration
         * @param {PushApiPutPushDeviceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPushDeviceDetails(requestParameters: PushApiPutPushDeviceDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceDetails> {
            return localVarFp.putPushDeviceDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a device’s details, including the information necessary to deliver push notifications to it. Requires \"push-admin\" capability.
         * @summary Register a device for receiving push notifications
         * @param {PushApiRegisterPushDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPushDevice(requestParameters: PushApiRegisterPushDeviceRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DeviceDetails> {
            return localVarFp.registerPushDevice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
         * @summary Subscribe a device to a channel
         * @param {PushApiSubscribePushDeviceToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribePushDeviceToChannel(requestParameters: PushApiSubscribePushDeviceToChannelRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.subscribePushDeviceToChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
         * @summary Unregister matching devices for push notifications
         * @param {PushApiUnregisterAllPushDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterAllPushDevices(requestParameters: PushApiUnregisterAllPushDevicesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unregisterAllPushDevices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
         * @summary Unregister a single device for push notifications
         * @param {PushApiUnregisterPushDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterPushDevice(requestParameters: PushApiUnregisterPushDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unregisterPushDevice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an updated device details object.
         * @summary Reset a registered device\'s update token
         * @param {PushApiUpdatePushDeviceDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePushDeviceDetails(requestParameters: PushApiUpdatePushDeviceDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceDetails> {
            return localVarFp.updatePushDeviceDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePushDeviceDetails operation in PushApi.
 * @export
 * @interface PushApiDeletePushDeviceDetailsRequest
 */
export type PushApiDeletePushDeviceDetailsRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiDeletePushDeviceDetails
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiDeletePushDeviceDetails
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
    /**
    * Filter to restrict to subscriptions associated with that channel.
    * @type {string}
    * @memberof PushApiDeletePushDeviceDetails
    */
    readonly channel?: string
    
    /**
    * Must be set when clientId is empty, cannot be used with clientId.
    * @type {string}
    * @memberof PushApiDeletePushDeviceDetails
    */
    readonly deviceId?: string
    
    /**
    * Must be set when deviceId is empty, cannot be used with deviceId.
    * @type {string}
    * @memberof PushApiDeletePushDeviceDetails
    */
    readonly clientId?: string
    
}

/**
 * Request parameters for getChannelsWithPushSubscribers operation in PushApi.
 * @export
 * @interface PushApiGetChannelsWithPushSubscribersRequest
 */
export type PushApiGetChannelsWithPushSubscribersRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiGetChannelsWithPushSubscribers
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiGetChannelsWithPushSubscribers
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
}

/**
 * Request parameters for getPushDeviceDetails operation in PushApi.
 * @export
 * @interface PushApiGetPushDeviceDetailsRequest
 */
export type PushApiGetPushDeviceDetailsRequest = {
    
    /**
    * Device\'s ID.
    * @type {string}
    * @memberof PushApiGetPushDeviceDetails
    */
    readonly deviceId: string
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiGetPushDeviceDetails
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiGetPushDeviceDetails
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
}

/**
 * Request parameters for getPushSubscriptionsOnChannels operation in PushApi.
 * @export
 * @interface PushApiGetPushSubscriptionsOnChannelsRequest
 */
export type PushApiGetPushSubscriptionsOnChannelsRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiGetPushSubscriptionsOnChannels
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiGetPushSubscriptionsOnChannels
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
    /**
    * Filter to restrict to subscriptions associated with that channel.
    * @type {string}
    * @memberof PushApiGetPushSubscriptionsOnChannels
    */
    readonly channel?: string
    
    /**
    * Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId.
    * @type {string}
    * @memberof PushApiGetPushSubscriptionsOnChannels
    */
    readonly deviceId?: string
    
    /**
    * Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId.
    * @type {string}
    * @memberof PushApiGetPushSubscriptionsOnChannels
    */
    readonly clientId?: string
    
    /**
    * The maximum number of records to return.
    * @type {number}
    * @memberof PushApiGetPushSubscriptionsOnChannels
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getRegisteredPushDevices operation in PushApi.
 * @export
 * @interface PushApiGetRegisteredPushDevicesRequest
 */
export type PushApiGetRegisteredPushDevicesRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiGetRegisteredPushDevices
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiGetRegisteredPushDevices
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
    /**
    * Optional filter to restrict to devices associated with that deviceId.
    * @type {string}
    * @memberof PushApiGetRegisteredPushDevices
    */
    readonly deviceId?: string
    
    /**
    * Optional filter to restrict to devices associated with that clientId.
    * @type {string}
    * @memberof PushApiGetRegisteredPushDevices
    */
    readonly clientId?: string
    
    /**
    * The maximum number of records to return.
    * @type {number}
    * @memberof PushApiGetRegisteredPushDevices
    */
    readonly limit?: number
    
}

/**
 * Request parameters for patchPushDeviceDetails operation in PushApi.
 * @export
 * @interface PushApiPatchPushDeviceDetailsRequest
 */
export type PushApiPatchPushDeviceDetailsRequest = {
    
    /**
    * Device\'s ID.
    * @type {string}
    * @memberof PushApiPatchPushDeviceDetails
    */
    readonly deviceId: string
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiPatchPushDeviceDetails
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiPatchPushDeviceDetails
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
} & DeviceDetails

/**
 * Request parameters for publishPushNotificationToDevices operation in PushApi.
 * @export
 * @interface PushApiPublishPushNotificationToDevicesRequest
 */
export type PushApiPublishPushNotificationToDevicesRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiPublishPushNotificationToDevices
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiPublishPushNotificationToDevices
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
} & PublishPushNotificationToDevicesRequest

/**
 * Request parameters for putPushDeviceDetails operation in PushApi.
 * @export
 * @interface PushApiPutPushDeviceDetailsRequest
 */
export type PushApiPutPushDeviceDetailsRequest = {
    
    /**
    * Device\'s ID.
    * @type {string}
    * @memberof PushApiPutPushDeviceDetails
    */
    readonly deviceId: string
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiPutPushDeviceDetails
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiPutPushDeviceDetails
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
} & DeviceDetails

/**
 * Request parameters for registerPushDevice operation in PushApi.
 * @export
 * @interface PushApiRegisterPushDeviceRequest
 */
export type PushApiRegisterPushDeviceRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiRegisterPushDevice
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiRegisterPushDevice
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
} & DeviceDetails

/**
 * Request parameters for subscribePushDeviceToChannel operation in PushApi.
 * @export
 * @interface PushApiSubscribePushDeviceToChannelRequest
 */
export type PushApiSubscribePushDeviceToChannelRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiSubscribePushDeviceToChannel
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiSubscribePushDeviceToChannel
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
} & SubscribePushDeviceToChannelRequest

/**
 * Request parameters for unregisterAllPushDevices operation in PushApi.
 * @export
 * @interface PushApiUnregisterAllPushDevicesRequest
 */
export type PushApiUnregisterAllPushDevicesRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiUnregisterAllPushDevices
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiUnregisterAllPushDevices
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
    /**
    * Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId.
    * @type {string}
    * @memberof PushApiUnregisterAllPushDevices
    */
    readonly deviceId?: string
    
    /**
    * Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId.
    * @type {string}
    * @memberof PushApiUnregisterAllPushDevices
    */
    readonly clientId?: string
    
}

/**
 * Request parameters for unregisterPushDevice operation in PushApi.
 * @export
 * @interface PushApiUnregisterPushDeviceRequest
 */
export type PushApiUnregisterPushDeviceRequest = {
    
    /**
    * Device\'s ID.
    * @type {string}
    * @memberof PushApiUnregisterPushDevice
    */
    readonly deviceId: string
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiUnregisterPushDevice
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiUnregisterPushDevice
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
}

/**
 * Request parameters for updatePushDeviceDetails operation in PushApi.
 * @export
 * @interface PushApiUpdatePushDeviceDetailsRequest
 */
export type PushApiUpdatePushDeviceDetailsRequest = {
    
    /**
    * Device\'s ID.
    * @type {string}
    * @memberof PushApiUpdatePushDeviceDetails
    */
    readonly deviceId: string
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PushApiUpdatePushDeviceDetails
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PushApiUpdatePushDeviceDetails
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
}

/**
 * PushApiGenerated - object-oriented interface
 * @export
 * @class PushApiGenerated
 * @extends {BaseAPI}
 */
export class PushApiGenerated extends BaseAPI {
    /**
     * Delete a device details object.
     * @summary Delete a registered device\'s update token
     * @param {PushApiDeletePushDeviceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public deletePushDeviceDetails(requestParameters: PushApiDeletePushDeviceDetailsRequest = {}, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).deletePushDeviceDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated response of channel names.
     * @summary List all channels with at least one subscribed device
     * @param {PushApiGetChannelsWithPushSubscribersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public getChannelsWithPushSubscribers(requestParameters: PushApiGetChannelsWithPushSubscribersRequest = {}, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).getChannelsWithPushSubscribers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the full details of a device.
     * @summary Get a device registration
     * @param {PushApiGetPushDeviceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public getPushDeviceDetails(requestParameters: PushApiGetPushDeviceDetailsRequest, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).getPushDeviceDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of push notification subscriptions to channels.
     * @summary List channel subscriptions
     * @param {PushApiGetPushSubscriptionsOnChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public getPushSubscriptionsOnChannels(requestParameters: PushApiGetPushSubscriptionsOnChannelsRequest = {}, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).getPushSubscriptionsOnChannels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of device details of devices registed for push notifications.
     * @summary List devices registered for receiving push notifications
     * @param {PushApiGetRegisteredPushDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public getRegisteredPushDevices(requestParameters: PushApiGetRegisteredPushDevicesRequest = {}, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).getRegisteredPushDevices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
     * @summary Update a device registration
     * @param {PushApiPatchPushDeviceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public patchPushDeviceDetails(requestParameters: PushApiPatchPushDeviceDetailsRequest, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).patchPushDeviceDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
     * @summary Publish a push notification to device(s)
     * @param {PushApiPublishPushNotificationToDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public publishPushNotificationToDevices(requestParameters: PushApiPublishPushNotificationToDevicesRequest, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).publishPushNotificationToDevices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
     * @summary Update a device registration
     * @param {PushApiPutPushDeviceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public putPushDeviceDetails(requestParameters: PushApiPutPushDeviceDetailsRequest, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).putPushDeviceDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a device’s details, including the information necessary to deliver push notifications to it. Requires \"push-admin\" capability.
     * @summary Register a device for receiving push notifications
     * @param {PushApiRegisterPushDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public registerPushDevice(requestParameters: PushApiRegisterPushDeviceRequest = {}, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).registerPushDevice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
     * @summary Subscribe a device to a channel
     * @param {PushApiSubscribePushDeviceToChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public subscribePushDeviceToChannel(requestParameters: PushApiSubscribePushDeviceToChannelRequest = {}, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).subscribePushDeviceToChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
     * @summary Unregister matching devices for push notifications
     * @param {PushApiUnregisterAllPushDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public unregisterAllPushDevices(requestParameters: PushApiUnregisterAllPushDevicesRequest = {}, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).unregisterAllPushDevices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
     * @summary Unregister a single device for push notifications
     * @param {PushApiUnregisterPushDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public unregisterPushDevice(requestParameters: PushApiUnregisterPushDeviceRequest, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).unregisterPushDevice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an updated device details object.
     * @summary Reset a registered device\'s update token
     * @param {PushApiUpdatePushDeviceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApiGenerated
     */
    public updatePushDeviceDetails(requestParameters: PushApiUpdatePushDeviceDetailsRequest, options?: AxiosRequestConfig) {
        return PushApiFp(this.configuration).updatePushDeviceDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
