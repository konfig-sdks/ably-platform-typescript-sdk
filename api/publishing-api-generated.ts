/* tslint:disable */
/* eslint-disable */
/*
Platform API

The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.

The version of the OpenAPI document: 1.1.0
Contact: support@ably.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Extras } from '../models';
// @ts-ignore
import { Message } from '../models';
// @ts-ignore
import { PublishMessagesToChannel2XXResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PublishingApi - axios parameter creator
 * @export
 */
export const PublishingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Publish a message to the specified channel
         * @summary Publish a message to a channel
         * @param {string} channelId The [Channel\&#39;s ID](https://www.ably.io/documentation/rest/channels).
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {Message} [message] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishMessagesToChannel: async (channelId: string, xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', message?: Message, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('publishMessagesToChannel', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}/messages`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: message,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/messages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(message, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublishingApi - functional programming interface
 * @export
 */
export const PublishingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublishingApiAxiosParamCreator(configuration)
    return {
        /**
         * Publish a message to the specified channel
         * @summary Publish a message to a channel
         * @param {PublishingApiPublishMessagesToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishMessagesToChannel(requestParameters: PublishingApiPublishMessagesToChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishMessagesToChannel2XXResponse>> {
            const message: Message = {
                clientId: requestParameters.clientId,
                connectionId: requestParameters.connectionId,
                data: requestParameters.data,
                encoding: requestParameters.encoding,
                extras: requestParameters.extras,
                id: requestParameters.id,
                name: requestParameters.name,
                timestamp: requestParameters.timestamp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishMessagesToChannel(requestParameters.channelId, requestParameters.xAblyVersion, requestParameters.format, message, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublishingApi - factory interface
 * @export
 */
export const PublishingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublishingApiFp(configuration)
    return {
        /**
         * Publish a message to the specified channel
         * @summary Publish a message to a channel
         * @param {PublishingApiPublishMessagesToChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishMessagesToChannel(requestParameters: PublishingApiPublishMessagesToChannelRequest, options?: AxiosRequestConfig): AxiosPromise<PublishMessagesToChannel2XXResponse> {
            return localVarFp.publishMessagesToChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for publishMessagesToChannel operation in PublishingApi.
 * @export
 * @interface PublishingApiPublishMessagesToChannelRequest
 */
export type PublishingApiPublishMessagesToChannelRequest = {
    
    /**
    * The [Channel\'s ID](https://www.ably.io/documentation/rest/channels).
    * @type {string}
    * @memberof PublishingApiPublishMessagesToChannel
    */
    readonly channelId: string
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof PublishingApiPublishMessagesToChannel
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof PublishingApiPublishMessagesToChannel
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
} & Message

/**
 * PublishingApiGenerated - object-oriented interface
 * @export
 * @class PublishingApiGenerated
 * @extends {BaseAPI}
 */
export class PublishingApiGenerated extends BaseAPI {
    /**
     * Publish a message to the specified channel
     * @summary Publish a message to a channel
     * @param {PublishingApiPublishMessagesToChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublishingApiGenerated
     */
    public publishMessagesToChannel(requestParameters: PublishingApiPublishMessagesToChannelRequest, options?: AxiosRequestConfig) {
        return PublishingApiFp(this.configuration).publishMessagesToChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
