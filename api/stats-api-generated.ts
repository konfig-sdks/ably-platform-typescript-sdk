/* tslint:disable */
/* eslint-disable */
/*
Platform API

The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.

The version of the OpenAPI document: 1.1.0
Contact: support@ably.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StatsApi - axios parameter creator
 * @export
 */
export const StatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Ably system can be queried to obtain usage statistics for a given application, and results are provided aggregated across all channels in use in the application in the specified period. Stats may be used to track usage against account quotas.
         * @summary Retrieve usage statistics for an application
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {string} [start] 
         * @param {number} [limit] 
         * @param {string} [end] 
         * @param {'forwards' | 'backwards'} [direction] 
         * @param {'minute' | 'hour' | 'day' | 'month'} [unit] Specifies the unit of aggregation in the returned results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', start?: string, limit?: number, end?: string, direction?: 'forwards' | 'backwards', unit?: 'minute' | 'hour' | 'day' | 'month', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (unit !== undefined) {
                localVarQueryParameter['unit'] = unit;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns the service time in milliseconds since the epoch.
         * @summary Get the service time
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTime: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/time',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatsApi - functional programming interface
 * @export
 */
export const StatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatsApiAxiosParamCreator(configuration)
    return {
        /**
         * The Ably system can be queried to obtain usage statistics for a given application, and results are provided aggregated across all channels in use in the application in the specified period. Stats may be used to track usage against account quotas.
         * @summary Retrieve usage statistics for an application
         * @param {StatsApiGetStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStats(requestParameters: StatsApiGetStatsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStats(requestParameters.xAblyVersion, requestParameters.format, requestParameters.start, requestParameters.limit, requestParameters.end, requestParameters.direction, requestParameters.unit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This returns the service time in milliseconds since the epoch.
         * @summary Get the service time
         * @param {StatsApiGetTimeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTime(requestParameters: StatsApiGetTimeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTime(requestParameters.xAblyVersion, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatsApi - factory interface
 * @export
 */
export const StatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatsApiFp(configuration)
    return {
        /**
         * The Ably system can be queried to obtain usage statistics for a given application, and results are provided aggregated across all channels in use in the application in the specified period. Stats may be used to track usage against account quotas.
         * @summary Retrieve usage statistics for an application
         * @param {StatsApiGetStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(requestParameters: StatsApiGetStatsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getStats(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This returns the service time in milliseconds since the epoch.
         * @summary Get the service time
         * @param {StatsApiGetTimeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTime(requestParameters: StatsApiGetTimeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.getTime(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStats operation in StatsApi.
 * @export
 * @interface StatsApiGetStatsRequest
 */
export type StatsApiGetStatsRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof StatsApiGetStats
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof StatsApiGetStats
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
    /**
    * 
    * @type {string}
    * @memberof StatsApiGetStats
    */
    readonly start?: string
    
    /**
    * 
    * @type {number}
    * @memberof StatsApiGetStats
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof StatsApiGetStats
    */
    readonly end?: string
    
    /**
    * 
    * @type {'forwards' | 'backwards'}
    * @memberof StatsApiGetStats
    */
    readonly direction?: 'forwards' | 'backwards'
    
    /**
    * Specifies the unit of aggregation in the returned results.
    * @type {'minute' | 'hour' | 'day' | 'month'}
    * @memberof StatsApiGetStats
    */
    readonly unit?: 'minute' | 'hour' | 'day' | 'month'
    
}

/**
 * Request parameters for getTime operation in StatsApi.
 * @export
 * @interface StatsApiGetTimeRequest
 */
export type StatsApiGetTimeRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof StatsApiGetTime
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof StatsApiGetTime
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
}

/**
 * StatsApiGenerated - object-oriented interface
 * @export
 * @class StatsApiGenerated
 * @extends {BaseAPI}
 */
export class StatsApiGenerated extends BaseAPI {
    /**
     * The Ably system can be queried to obtain usage statistics for a given application, and results are provided aggregated across all channels in use in the application in the specified period. Stats may be used to track usage against account quotas.
     * @summary Retrieve usage statistics for an application
     * @param {StatsApiGetStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiGenerated
     */
    public getStats(requestParameters: StatsApiGetStatsRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiFp(this.configuration).getStats(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This returns the service time in milliseconds since the epoch.
     * @summary Get the service time
     * @param {StatsApiGetTimeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiGenerated
     */
    public getTime(requestParameters: StatsApiGetTimeRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiFp(this.configuration).getTime(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
