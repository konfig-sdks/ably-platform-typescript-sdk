/* tslint:disable */
/* eslint-disable */
/*
Platform API

The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.

The version of the OpenAPI document: 1.1.0
Contact: support@ably.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RequestAccessTokenRequest } from '../models';
// @ts-ignore
import { TokenDetails } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This is the means by which clients obtain access tokens to use the service. You can see how to construct an Ably TokenRequest in the [Ably TokenRequest spec](https://www.ably.io/documentation/rest-api/token-request-spec) documentation, although we recommend you use an Ably SDK rather to create a TokenRequest, as the construction of a TokenRequest is complex. The resulting token response object contains the token properties as defined in Ably TokenRequest spec. Authentication is not required if using a Signed TokenRequest.
         * @summary Request an access token
         * @param {string} keyName The [key name](https://www.ably.io/documentation/rest-api/token-request-spec#api-key-format) comprises of the app ID and key ID of an API key.
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {RequestAccessTokenRequest} [requestAccessTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestAccessToken: async (keyName: string, xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', requestAccessTokenRequest?: RequestAccessTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyName' is not null or undefined
            assertParamExists('requestAccessToken', 'keyName', keyName)
            const localVarPath = `/keys/{keyName}/requestToken`
                .replace(`{${"keyName"}}`, encodeURIComponent(String(keyName !== undefined ? keyName : `-keyName-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestAccessTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/keys/{keyName}/requestToken',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestAccessTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * This is the means by which clients obtain access tokens to use the service. You can see how to construct an Ably TokenRequest in the [Ably TokenRequest spec](https://www.ably.io/documentation/rest-api/token-request-spec) documentation, although we recommend you use an Ably SDK rather to create a TokenRequest, as the construction of a TokenRequest is complex. The resulting token response object contains the token properties as defined in Ably TokenRequest spec. Authentication is not required if using a Signed TokenRequest.
         * @summary Request an access token
         * @param {AuthenticationApiRequestAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestAccessToken(requestParameters: AuthenticationApiRequestAccessTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenDetails>> {
            const requestAccessTokenRequest: RequestAccessTokenRequest = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestAccessToken(requestParameters.keyName, requestParameters.xAblyVersion, requestParameters.format, requestAccessTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * This is the means by which clients obtain access tokens to use the service. You can see how to construct an Ably TokenRequest in the [Ably TokenRequest spec](https://www.ably.io/documentation/rest-api/token-request-spec) documentation, although we recommend you use an Ably SDK rather to create a TokenRequest, as the construction of a TokenRequest is complex. The resulting token response object contains the token properties as defined in Ably TokenRequest spec. Authentication is not required if using a Signed TokenRequest.
         * @summary Request an access token
         * @param {AuthenticationApiRequestAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestAccessToken(requestParameters: AuthenticationApiRequestAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<TokenDetails> {
            return localVarFp.requestAccessToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for requestAccessToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiRequestAccessTokenRequest
 */
export type AuthenticationApiRequestAccessTokenRequest = {
    /**
    * The [key name](https://www.ably.io/documentation/rest-api/token-request-spec#api-key-format) comprises of the app ID and key ID of an API key.
    * @type {string}
    * @memberof AuthenticationApiRequestAccessToken
    */
    readonly keyName: string
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof AuthenticationApiRequestAccessToken
    */
    readonly xAblyVersion?: string
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof AuthenticationApiRequestAccessToken
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    /**
    * 
    * @type {RequestAccessTokenRequest}
    * @memberof AuthenticationApiRequestAccessToken
    */
    readonly requestBody?: RequestAccessTokenRequest
}

/**
 * AuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationApiGenerated
 * @extends {BaseAPI}
 */
export class AuthenticationApiGenerated extends BaseAPI {
    /**
     * This is the means by which clients obtain access tokens to use the service. You can see how to construct an Ably TokenRequest in the [Ably TokenRequest spec](https://www.ably.io/documentation/rest-api/token-request-spec) documentation, although we recommend you use an Ably SDK rather to create a TokenRequest, as the construction of a TokenRequest is complex. The resulting token response object contains the token properties as defined in Ably TokenRequest spec. Authentication is not required if using a Signed TokenRequest.
     * @summary Request an access token
     * @param {AuthenticationApiRequestAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public requestAccessToken(requestParameters: AuthenticationApiRequestAccessTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).requestAccessToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
