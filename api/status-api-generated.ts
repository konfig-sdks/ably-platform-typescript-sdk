/* tslint:disable */
/* eslint-disable */
/*
Platform API

The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.

The version of the OpenAPI document: 1.1.0
Contact: support@ably.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChannelDetails } from '../models';
// @ts-ignore
import { GetMetadataOfAllChannels2XXResponse } from '../models';
// @ts-ignore
import { PresenceMessage } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Enumerate all active channels of the application
         * @summary Enumerate all active channels of the application
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {number} [limit] 
         * @param {string} [prefix] Optionally limits the query to only those channels whose name starts with the given prefix
         * @param {'value' | 'id'} [by] optionally specifies whether to return just channel names (by&#x3D;id) or ChannelDetails (by&#x3D;value)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadataOfAllChannels: async (xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', limit?: number, prefix?: string, by?: 'value' | 'id', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (by !== undefined) {
                localVarQueryParameter['by'] = by;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metadata of a channel
         * @summary Get metadata of a channel
         * @param {string} channelId The [Channel\&#39;s ID](https://www.ably.io/documentation/rest/channels).
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadataOfChannel: async (channelId: string, xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getMetadataOfChannel', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get presence on a channel
         * @summary Get presence of a channel
         * @param {string} channelId The [Channel\&#39;s ID](https://www.ably.io/documentation/rest/channels).
         * @param {string} [xAblyVersion] The version of the API you wish to use.
         * @param {'json' | 'jsonp' | 'msgpack' | 'html'} [format] The response format you would like
         * @param {string} [clientId] 
         * @param {string} [connectionId] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPresenceOfChannel: async (channelId: string, xAblyVersion?: string, format?: 'json' | 'jsonp' | 'msgpack' | 'html', clientId?: string, connectionId?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getPresenceOfChannel', 'channelId', channelId)
            const localVarPath = `/channels/{channel_id}/presence`
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (connectionId !== undefined) {
                localVarQueryParameter['connectionId'] = connectionId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xAblyVersion != null) {
                localVarHeaderParameter['X-Ably-Version'] = String(xAblyVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/channels/{channel_id}/presence',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatusApiAxiosParamCreator(configuration)
    return {
        /**
         * Enumerate all active channels of the application
         * @summary Enumerate all active channels of the application
         * @param {StatusApiGetMetadataOfAllChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadataOfAllChannels(requestParameters: StatusApiGetMetadataOfAllChannelsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMetadataOfAllChannels2XXResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetadataOfAllChannels(requestParameters.xAblyVersion, requestParameters.format, requestParameters.limit, requestParameters.prefix, requestParameters.by, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get metadata of a channel
         * @summary Get metadata of a channel
         * @param {StatusApiGetMetadataOfChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadataOfChannel(requestParameters: StatusApiGetMetadataOfChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetadataOfChannel(requestParameters.channelId, requestParameters.xAblyVersion, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get presence on a channel
         * @summary Get presence of a channel
         * @param {StatusApiGetPresenceOfChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPresenceOfChannel(requestParameters: StatusApiGetPresenceOfChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PresenceMessage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPresenceOfChannel(requestParameters.channelId, requestParameters.xAblyVersion, requestParameters.format, requestParameters.clientId, requestParameters.connectionId, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatusApiFp(configuration)
    return {
        /**
         * Enumerate all active channels of the application
         * @summary Enumerate all active channels of the application
         * @param {StatusApiGetMetadataOfAllChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadataOfAllChannels(requestParameters: StatusApiGetMetadataOfAllChannelsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetMetadataOfAllChannels2XXResponse> {
            return localVarFp.getMetadataOfAllChannels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get metadata of a channel
         * @summary Get metadata of a channel
         * @param {StatusApiGetMetadataOfChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadataOfChannel(requestParameters: StatusApiGetMetadataOfChannelRequest, options?: AxiosRequestConfig): AxiosPromise<ChannelDetails> {
            return localVarFp.getMetadataOfChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get presence on a channel
         * @summary Get presence of a channel
         * @param {StatusApiGetPresenceOfChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPresenceOfChannel(requestParameters: StatusApiGetPresenceOfChannelRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PresenceMessage>> {
            return localVarFp.getPresenceOfChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMetadataOfAllChannels operation in StatusApi.
 * @export
 * @interface StatusApiGetMetadataOfAllChannelsRequest
 */
export type StatusApiGetMetadataOfAllChannelsRequest = {
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof StatusApiGetMetadataOfAllChannels
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof StatusApiGetMetadataOfAllChannels
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
    /**
    * 
    * @type {number}
    * @memberof StatusApiGetMetadataOfAllChannels
    */
    readonly limit?: number
    
    /**
    * Optionally limits the query to only those channels whose name starts with the given prefix
    * @type {string}
    * @memberof StatusApiGetMetadataOfAllChannels
    */
    readonly prefix?: string
    
    /**
    * optionally specifies whether to return just channel names (by=id) or ChannelDetails (by=value)
    * @type {'value' | 'id'}
    * @memberof StatusApiGetMetadataOfAllChannels
    */
    readonly by?: 'value' | 'id'
    
}

/**
 * Request parameters for getMetadataOfChannel operation in StatusApi.
 * @export
 * @interface StatusApiGetMetadataOfChannelRequest
 */
export type StatusApiGetMetadataOfChannelRequest = {
    
    /**
    * The [Channel\'s ID](https://www.ably.io/documentation/rest/channels).
    * @type {string}
    * @memberof StatusApiGetMetadataOfChannel
    */
    readonly channelId: string
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof StatusApiGetMetadataOfChannel
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof StatusApiGetMetadataOfChannel
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
}

/**
 * Request parameters for getPresenceOfChannel operation in StatusApi.
 * @export
 * @interface StatusApiGetPresenceOfChannelRequest
 */
export type StatusApiGetPresenceOfChannelRequest = {
    
    /**
    * The [Channel\'s ID](https://www.ably.io/documentation/rest/channels).
    * @type {string}
    * @memberof StatusApiGetPresenceOfChannel
    */
    readonly channelId: string
    
    /**
    * The version of the API you wish to use.
    * @type {string}
    * @memberof StatusApiGetPresenceOfChannel
    */
    readonly xAblyVersion?: string
    
    /**
    * The response format you would like
    * @type {'json' | 'jsonp' | 'msgpack' | 'html'}
    * @memberof StatusApiGetPresenceOfChannel
    */
    readonly format?: 'json' | 'jsonp' | 'msgpack' | 'html'
    
    /**
    * 
    * @type {string}
    * @memberof StatusApiGetPresenceOfChannel
    */
    readonly clientId?: string
    
    /**
    * 
    * @type {string}
    * @memberof StatusApiGetPresenceOfChannel
    */
    readonly connectionId?: string
    
    /**
    * 
    * @type {number}
    * @memberof StatusApiGetPresenceOfChannel
    */
    readonly limit?: number
    
}

/**
 * StatusApiGenerated - object-oriented interface
 * @export
 * @class StatusApiGenerated
 * @extends {BaseAPI}
 */
export class StatusApiGenerated extends BaseAPI {
    /**
     * Enumerate all active channels of the application
     * @summary Enumerate all active channels of the application
     * @param {StatusApiGetMetadataOfAllChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApiGenerated
     */
    public getMetadataOfAllChannels(requestParameters: StatusApiGetMetadataOfAllChannelsRequest = {}, options?: AxiosRequestConfig) {
        return StatusApiFp(this.configuration).getMetadataOfAllChannels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get metadata of a channel
     * @summary Get metadata of a channel
     * @param {StatusApiGetMetadataOfChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApiGenerated
     */
    public getMetadataOfChannel(requestParameters: StatusApiGetMetadataOfChannelRequest, options?: AxiosRequestConfig) {
        return StatusApiFp(this.configuration).getMetadataOfChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get presence on a channel
     * @summary Get presence of a channel
     * @param {StatusApiGetPresenceOfChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApiGenerated
     */
    public getPresenceOfChannel(requestParameters: StatusApiGetPresenceOfChannelRequest, options?: AxiosRequestConfig) {
        return StatusApiFp(this.configuration).getPresenceOfChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
